# -*- coding: utf-8 -*-
"""StreamLit_CreditSCore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1if0ilLf9_pc_rAijgKb12EpkqTohGUXN
"""

import streamlit as st
import pickle
import pandas as pd
import joblib
from zipfile import ZipFile
import os
import seaborn as sns
import matplotlib.pyplot as plt

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

scaler = joblib.load('/content/sample_data/credit_scaler.pkl')
#model = pickle.load('/content/sample_data/credit_scaler.pkl')
model = open('/content/sample_data/credit_scaler.pkl', 'rb')

# Transform Input columns
def transform_resp(resp):
    def yes_no(column):
        if resp[column] == 'Yes':
            return 1
        else:
            return 0
# LOANS TYPES COMBINING
    loans = {
        'Auto Loan': 0,
        'Credit-Builder Loan': 0,
        'Personal Loan': 0,
        'Home Equity Loan': 0,
        'Mortgage Loan': 0,
        'Student Loan': 0,
        'Debt Consolidation Loan': 0,
        'Payday Loan': 0
    }

    if resp['loans'] == None:
        loans['Auto Loan'] = 0
        loans['Credit-Builder Loan'] = 0
        loans['Personal Loan'] = 0
        loans['Home Equity Loan'] = 0
        loans['Mortgage Loan'] = 0
        loans['Student Loan'] = 0
        loans['Debt Consolidation Loan'] = 0
        loans['Payday Loan'] = 0
    else:
        for key_ans in loans.keys():
            if key_ans in resp['loans']:
                loans[key_ans] = 1

# PAYMENT BEHAVIOUR
    payment_behaviour = {
        'High_spent_Medium_value_payments': 0,
        'High_spent_Small_value_payments': 0,
        'Low_spent_Large_value_payments': 0,
        'Low_spent_Medium_value_payments': 0,
        'Low_spent_Small_value_payments': 0,

    }
    if resp['payment_behaviour'] == None:
        payment_behaviour['High_spent_Medium_value_payments'] = 0
        payment_behaviour['High_spent_Small_value_payments'] = 0
        payment_behaviour['Low_spent_Large_value_payments'] = 0
        payment_behaviour['Low_spent_Medium_value_payments'] = 0
        payment_behaviour['Low_spent_Small_value_payments'] = 0
    else:
        for key_ans in loans.keys():
            if key_ans in resp['payment_behaviour']:
                payment_behaviour[key_ans] = 1


# COLUMNS
    output = {
        'Age': resp['age'],
        'Annual_Income': resp['annual_income'],
        'Num_Bank_Accounts': resp['accounts'],
        'Num_Credit_Card': resp['credit_cards'],
        'Num_of_Delayed_Payment': resp['delayed_payments'],
        'Credit_Utilization_Ratio': resp['credit_card_ratio'],
        'Total_EMI_per_month': resp['emi_monthly'],
        'Credit_History_Age_Formated': resp['credit_history'],
        'Auto_Loan': loans['Auto Loan'],
        'Credit-Builder_Loan': loans['Credit-Builder Loan'],
        'Personal_Loan': loans['Personal Loan'],
        'Home_Equity_Loan': loans['Home Equity Loan'],
        'Mortgage_Loan': loans['Mortgage Loan'],
        'Student_Loan': loans['Student Loan'],
        'Debt_Consolidation_Loan': loans['Debt Consolidation Loan'],
        'Payday_Loan': loans['Payday Loan'],
        'Missed_Payment_Day': yes_no('missed_payment'),
        'Payment_of_Min_Amount_Yes': yes_no('minimum_payment')
    }

    return output

st.set_page_config(page_title='Credit Score App', page_icon='ðŸ’°', layout='wide',
                   initial_sidebar_state='auto', menu_items={
                        'Get Help': None,
                          })

# Defining Default values
age_default = None
annual_income_default = 0.00
accounts_default = 0
credit_cards_default = 0
delayed_payments_default = 0
credit_card_ratio_default = 0.00
emi_monthly_default = 0.00
credit_history_default = 0
loans_default = None
missed_payment_default = 0
minimum_payment_default = 0
payment_behaviour_default = None

st.title('Credit Score Analysis')

# Input Values
with st.sidebar:
    st.header('Credit Score Prediction Form')
    age = st.slider('What is your age?', min_value=18, max_value=100, step=1, value=age_default)
    annual_income = st.number_input('What is your Annual Income?', min_value=0.00, max_value=300000.00, value=annual_income_default)
    accounts = st.number_input('How many bank accounts do you have?', min_value=0, max_value=20, step=1, value=accounts_default)
    credit_cards = st.number_input('How many credit cards do you have?', min_value=0, max_value=12, step=1, value=credit_cards_default)
    delayed_payments = st.number_input('How many delayed payments do you have?', min_value=0, max_value=20, step=1, value=delayed_payments_default)
    credit_card_ratio = st.slider('What is your credit card utilization ratio?', min_value=0.00, max_value=100.00, value=credit_card_ratio_default)
    emi_monthly = st.number_input('How much EMI do you pay monthly?', min_value=0.00, max_value=5000.00, value=emi_monthly_default)
    credit_history = st.number_input('How many months old is your credit history?', min_value=0, max_value=500, step=1, value=credit_history_default)
    loans = st.multiselect('Which loans do you have?', ['Auto Loan', 'Credit-Builder Loan', 'Personal Loan',
                                                'Home Equity Loan', 'Mortgage Loan', 'Student Loan',
                                                'Debt Consolidation Loan', 'Payday Loan'], default=loans_default)
    payment_behaviour = st.multiselect('What is your Payment_Behaviour?', ['High_spent_Small_value_payments', 'Credit-Builder Loan',
                                                'Low_spent_Large_value_payments', 'Low_spent_Medium_value_payments',
                                                'spent_Small_value_payments', ], default=payment_behaviour_default)

    missed_payment = st.radio('Have you missed any payments in the last 12 months?', ['Yes', 'No'], index=missed_payment_default)
    minimum_payment = st.radio('Have you paid the minimum amount on at least one of your credit cards?', ['Yes', 'No'], index=minimum_payment_default)

    run = st.button( 'Predict Credit Score!')

col1, col2 = st.columns([3, 2])

with col2:
    x1 = [0, 6, 0]
    x2 = [0, 4, 0]
    x3 = [0, 2, 0]
    y = ['0', '1', '2']

    f, ax = plt.subplots(figsize=(5,2))

    p1 = sns.barplot(x=x1, y=y, color='#3EC300')
    p1.set(xticklabels=[], yticklabels=[])
    p1.tick_params(bottom=False, left=False)
    p2 = sns.barplot(x=x2, y=y, color='#FAA300')
    p2.set(xticklabels=[], yticklabels=[])
    p2.tick_params(bottom=False, left=False)
    p3 = sns.barplot(x=x3, y=y, color='#FF331F')
    p3.set(xticklabels=[], yticklabels=[])
    p3.tick_params(bottom=False, left=False)

    plt.text(0.7, 1.05, "POOR", horizontalalignment='left', size='medium', color='white', weight='semibold')
    plt.text(2.5, 1.05, "REGULAR", horizontalalignment='left', size='medium', color='white', weight='semibold')
    plt.text(4.7, 1.05, "GOOD", horizontalalignment='left', size='medium', color='white', weight='semibold')

    ax.set(xlim=(0, 6))
    sns.despine(left=True, bottom=True)
    figure = st.pyplot(f)

with col1:

    placeholder = st.empty()

    if run:
        resp = {
            'age': age,
            'annual_income': annual_income,
            'accounts': accounts,
            'credit_cards': credit_cards,
            'delayed_payments': delayed_payments,
            'credit_card_ratio': credit_card_ratio,
            'emi_monthly': emi_monthly,
            'credit_history': credit_history,
            'loans': loans,
            'missed_payment': missed_payment,
            'minimum_payment': minimum_payment,
            'payment_behaviour':payment_behaviour
        }
        output = transform_resp(resp)
        output = pd.DataFrame(output, index=[0])
        output.loc[:,:] = scaler.transform(output)

output = transform_resp(resp)
output = pd.DataFrame(output, index=[0])
output.loc[:,:] = scaler.transform(output)

credit_score = model.predict(output)[0]

if credit_score == 1:
    st.balloons()
    t1 = plt.Polygon([[5, 0.5], [5.5, 0], [4.5, 0]], color='black')
    placeholder.markdown('Your credit score is **GOOD**! Congratulations!')
    st.markdown('This credit score indicates that this person is likely to repay a loan, so the risk of giving them credit is low.')
elif credit_score == 0:
    t1 = plt.Polygon([[3, 0.5], [3.5, 0], [2.5, 0]], color='black')
    placeholder.markdown('Your credit score is **STANDARD**.')
    st.markdown('This credit score indicates that this person is likely to repay a loan, but can occasionally miss some payments. Meaning that the risk of giving them credit is medium.')
elif credit_score == -1:
    t1 = plt.Polygon([[1, 0.5], [1.5, 0], [0.5, 0]], color='black')
    placeholder.markdown('Your credit score is **POOR**.')
    st.markdown('This credit score indicates that this person is unlikely to repay a loan, so the risk of lending them credit is high.')
    plt.gca().add_patch(t1)
    figure.pyplot(f)
    prob_fig, ax = plt.subplots()